/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RemotePointerServer;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JPanel;

/**
 *
 * @author georg
 */
public class FramePointer extends javax.swing.JWindow {

    private RuntimeSettings rs;
    public DrawPane dp;
    BufferStrategy bs;

    /**
     * Creates new form FramePointer
     */
    public FramePointer() {
        baseInit();
    }
    public FramePointer(RuntimeSettings rs) {
        this.rs = rs;
        baseInit();
    }
    private void baseInit() {
        initComponents();
        //setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //setType(Window.Type.UTILITY);
        setBackground(new Color(255, 255, 255, 0));
        setSize(size+borderSize+1,size+borderSize+1);
        setLocation(100,100);
        x = getLocation().x;
        y = getLocation().y;
        //setExtendedState(getExtendedState() | JFrame.MAXIMIZED_BOTH);
        
        dp = new DrawPane();
        dp.setOpaque(false);
        
        setContentPane(dp);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setAlwaysOnTop(true);
        setAutoRequestFocus(false);
        setFocusable(false);
        setType(java.awt.Window.Type.POPUP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    float x = 0;
    float y = 0;
    int size = 20;
    int borderSize = 2;
    int lastPointerStyle = -1;
    
    public void update(float dx, float dy) {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int max_x = (int)screenSize.getWidth()-size-borderSize;
        int max_y = (int)screenSize.getHeight()-size-borderSize;
        x += dx;
        y += dy;
        if(x<0) x = 0;
        if(y<0) y = 0;
        if(x>max_x) x = max_x;
        if(y>max_y) y = max_y;
        setLocation((int)x, (int)y);
        
        if(rs != null && lastPointerStyle != rs.pointerStyle) {
            if(rs.pointerStyle == 3) {
                size = 80;
                borderSize = 12;
            } else if(rs.pointerStyle == 4) {
                size = 45;
                borderSize = 0;
            } else {
                size = 20;
                borderSize = 2;
            }
            setSize(size+borderSize+1, size+borderSize+1);
            dp.updateUI();
            setVisible(false);
            setVisible(true);
            dp.updateUI();
            lastPointerStyle = rs.pointerStyle;
        }
    }
    
    class DrawPane extends JPanel {
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;

            g2d.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(
                RenderingHints.KEY_TEXT_ANTIALIASING,
                RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            //draw on g here e.g.

            if(rs != null && rs.pointerStyle == 3) {
                /*
                Color[] colors = {
                    new Color(250,180,180,255),
                    new Color(240,10,10,255),
                    new Color(240,10,10,255),
                    new Color(255,255,255,0)
                };
                float[] dist = { 0.0f, 0.33f, 0.99f, 1.0f };
                Point2D center = new Point2D.Float((size/2), (size/2));
                RadialGradientPaint p = new RadialGradientPaint(center, (size/2), dist, colors);
                g2d.setPaint(p);
                g2d.clearRect(0,0,getWidth(),getHeight());
                g2d.fillOval((int)(borderSize/2), (int)(borderSize/2), size-(int)(borderSize/2), size-(int)(borderSize/2));
                */
                
                g.setColor(Color.WHITE);
                g2d.setStroke(new BasicStroke(borderSize));
                g2d.drawOval((int)(borderSize/2), (int)(borderSize/2), size-(int)(borderSize/2), size-(int)(borderSize/2));
            } else if(rs != null && rs.pointerStyle == 4) {
                try {
                    BufferedImage bi = ImageIO.read(SetupWindow.class.getResource("res/cursor.png"));
                    g2d.drawImage(bi, 0, 0, null);
                } catch (IOException ex) {
                    Logger.getLogger(FramePointer.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                //g2d.setPaint(null);
                g.setColor(new Color(240,10,10,255));
                if(rs != null) {
                    if(rs.pointerStyle == 1) g.setColor(new Color(10,240,10,255));
                    else if(rs.pointerStyle == 2) g.setColor(new Color(10,10,240,255));
                }
                g.fillOval((int)(borderSize/2), (int)(borderSize/2), size-(int)(borderSize/2), size-(int)(borderSize/2));

                g.setColor(Color.WHITE);
                g2d.setStroke(new BasicStroke(borderSize));
                g2d.drawOval((int)(borderSize/2), (int)(borderSize/2), size-(int)(borderSize/2), size-(int)(borderSize/2));
            }

            g2d.dispose();
         }
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
